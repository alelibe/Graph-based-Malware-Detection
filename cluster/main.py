import multiprocessing as mp
from concurrent.futures import ProcessPoolExecutor

from Utils.apkNoMainManager import ApkNoMainManager
from Utils.tongManager import TongManager
import time
from Utils.Libs.jobs import createDirDexFolders
from Utils.Libs.Data import num_core,base_path_dex
from Utils.workerJobs import work
from Utils.Libs.Data import sizeShaList




if __name__ == '__main__': 
    start_time = time.time()

    createDirDexFolders()
    
    pathDexList = [base_path_dex+str(core) for core in range(num_core)]

    # create a threadpool with num_core threads
    # pool = ThreadPool(processes=num_core)
    # pool = mp.Pool(num_core)
    pool = ProcessPoolExecutor(num_core)
    manager = mp.Manager()
    lockListAPK = manager.Lock()
    lockAPKnoMain = manager.Lock()


    apkNoMainManager = ApkNoMainManager(lockAPKnoMain)
    tongManager = TongManager(sizeShaList,lockListAPK)
    

    # for core,dexpath in enumerate(pathDexList):
    #     pool.submit(work, tongManager,apkNoMainManager,core,dexpath) 


    futures = [pool.submit(work, tongManager, apkNoMainManager, core, dexpath) for core,dexpath in enumerate(pathDexList)]
    for future in futures:
        future.result()
    # pool.starmap_async(work, [(tongManager,apkNoMainManager,core,dexpath) for core,dexpath in enumerate(pathDexList)])
 
    # print([(tongManager,apkNoMainManager,core,dexpath) for core,dexpath in enumerate(pathDexList)])
    # pool.map_async(work, [(tongManager,apkNoMainManager,core,dexpath) for core,dexpath in enumerate(pathDexList)])

    # for core,dexpath in enumerate(pathDexList):
    #     pool.apply_async(work, args=(tongManager,apkNoMainManager,core,dexpath))


    # pool.close()
    # pool.join()
    print("Process finished --- %s seconds ---" % (time.time() - start_time))
    
