import json
import os
import collections


def function_name_list(path):
    with open(path) as jsonFile:
        fcg = json.load(jsonFile)
 
    #create funtion_names list
    deque_node = collections.deque([])

    for node in fcg["nodes"]:
        if not "EXTERNAL" in str(node):
            deque_node.appendleft(node)
        else:
            deque_node.append(node)


    return deque_node


def function_edges_list(deque_node,path_fcg):
    #create function_edges list
    with open(path_fcg) as jsonFile:
        fcg = json.load(jsonFile)

    list_edges = []
    edge_src = []
    edge_target = []
    for edge in fcg["edges"]:
        # print(edge[0],edge[1])
        index_src = deque_node.index(edge[0])
        edge_src.append(index_src)
        index_target = deque_node.index(edge[1])
        edge_target.append(index_target)


    list_edges.append(edge_src)
    list_edges.append(edge_target)

    return list_edges


def acfg_list(deque_node,path_acfg):
    acfg_list = []
    for node in deque_node:
        if not "EXTERNAL" in node:
            path_to_cfg = os.path.join(path_acfg,"cfg_"+node+".json").replace("\\","/")
            # print(path_to_cfg)
            #create acfg_list
            with open(path_to_cfg) as jsonFile:
                cfg = json.load(jsonFile)

            
            block_edges = []
            block_features = []
            edge_src = []
            edge_target = []
            list_nodes = cfg["nodes"]

            
            for edge in cfg["edges"]:
                index_src = list_nodes.index(edge[0])
                edge_src.append(index_src)
                index_target = list_nodes.index(edge[1])
                edge_target.append(index_target)

            block_edges.append(edge_src)
            block_edges.append(edge_target)

            for node in list_nodes:
                block_features.append(list(cfg["basic_blocks"][node]["features"].values()))


            dict_block = {
                            'block_number': len(list_nodes), 
                            'block_edges': block_edges,
                            'block_features': block_features
                        }

            acfg_list.append(dict_block)
            

    return acfg_list


if __name__ == '__main__': 
    path = "C:/Users/Alessia/Desktop/provaGraphs"

    for apk in os.listdir(path):
        apk_fcg_path = os.path.join(path,apk,"fcg.json").replace("\\","/")
        apk_acfg_path = os.path.join(path,apk,"ACFG").replace("\\","/")

        deque_node = function_name_list(apk_fcg_path)
        list_edges = function_edges_list(deque_node,apk_fcg_path)
        acfg_lists = acfg_list(deque_node,apk_acfg_path)



        global_graph = {
                'funtion_edges': list_edges,
                'acfg_list': acfg_lists,
                'function_names': list(deque_node),
                'hash': str(apk),
                'function_number': len(list(deque_node))
            }
             

        path_preprocessGraph = "C:/Users/Alessia/Desktop/GraphsDataset/preProcessedGraphs/"+apk+".json"
        with open(path_preprocessGraph, "w") as outfile:
            json.dump(global_graph, outfile)





