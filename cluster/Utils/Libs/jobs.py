import wget
import os
import shutil
import zipfile
from Utils.Libs.Data import directoryAPKs,pathOutputUnzip,axmldec,pathDexList,analyzeHeadless,ghidra_projects,ghidra_script
from Utils.Libs.analyzeDex import AnalyzeManifest
import pandas as pd
from Utils.apkNoMainManager import ApkNoMainManager


def cleanApks(shaList):
    for sha in shaList:
        pathApk = os.path.join(directoryAPKs,sha+".apk").replace("\\","/")
        pathUnzipApk = os.path.join(pathOutputUnzip,sha).replace("\\","/")
        # remove apk file 
        os.remove(pathApk)
        # remove unzip apk folder
        shutil.rmtree(pathUnzipApk)
    



def cleanFolders(projectFolder,pathDexFiles):
    # delete project ghidra folders
    pathPrjDir = os.path.join(ghidra_projects,projectFolder+".rep").replace("\\","/")
    shutil.rmtree(pathPrjDir)
    pathPrjFile = os.path.join(ghidra_projects,projectFolder+".gpr").replace("\\","/")
    os.remove(pathPrjFile)

    # delete dex files folder
    for f in os.listdir(pathDexFiles):
        os.remove(os.path.join(pathDexFiles, f).replace("\\","/"))
    # shutil.rmtree(pathDexFiles)


def createDirDexFolders():
    for path in pathDexList:
        if not(os.path.exists(path)):
            os.mkdir(path)

def downloadAPKs(shaList,shaDownloaded):
    for i,sha in enumerate(shaList):
        isDownloaded = shaDownloaded[i]
        if not isDownloaded:
            url = 'https://androzoo.uni.lu/api/download?apikey=1ef38937bf841c4a90b49d0e756bd4980b56886822cd8f20d6cf18cd449d68c9&sha256='+sha

            try:
                wget.download(url,directoryAPKs)
                shaDownloaded[i] = True
                print("-----DOWNLOAD COMPLETED FOR: " + sha + "-----")
            except:
                print("----DOWNLOADED FAILED: " + sha + "-----")

    return shaDownloaded
                
    
    

def unzipAPKs(shaList):
    for sha in shaList:
        pathAPK = os.path.join(directoryAPKs,sha+".apk").replace("\\","/")
        pathOutput = os.path.join(pathOutputUnzip, sha).replace("\\","/")

        
        try:
            with zipfile.ZipFile(pathAPK, 'r') as z:
                z.extractall(pathOutput)
            print("-----APK " + sha + " UNZIPPED-----")
        except:
            print("Invalid file", pathAPK)



def decodeManifest(shaList):
    for sha in shaList:
        pathAPK = os.path.join(directoryAPKs,sha+".apk").replace("\\","/")

        pathOutManifest = os.path.join(pathOutputUnzip, sha, "AndroidManifest.xml").replace("\\","/")
        command = axmldec + " -o " + pathOutManifest + " " + pathAPK
        os.system(command)

    print("-----MANIFEST DECODED-----")


def renameDex(shaList,core_index):

    for sha in shaList:
        # path to dir of apk unzipped
        pathUnzipApk = os.path.join(pathOutputUnzip,sha).replace("\\","/")

        for file in os.listdir(pathUnzipApk):
            if file.endswith(".dex"):
                # path to dex file of this apk
                path_dex_file = os.path.join(pathUnzipApk, file).replace("\\","/")
                new_name = sha + ".dex"
                # path to dex file of this apk with the new name
                path_dex_src = os.path.join(pathUnzipApk, new_name).replace("\\","/")
                os.rename(path_dex_file,path_dex_src)
                # path to dex file of this apk in the DexFiles(core_index) folder
                path_dex_dest = os.path.join(pathDexList[core_index], new_name).replace("\\","/")
                shutil.move(path_dex_src,path_dex_dest)

    
    print("-----DEX SAVED-----")
    return pathDexList[core_index]




def importDex(pathDexFiles):
    # takes only last part of a path
    dexFile_index = os.path.basename(os.path.normpath(pathDexFiles))
    # takes only the index of path
    dexFile_index = dexFile_index.replace('DexFiles', '')
    # create name project for Ghidra
    namePrj = "Dataset" + dexFile_index
    
    command = analyzeHeadless + " " + ghidra_projects + " " + namePrj + " -import " + pathDexFiles + " -recursive -max-cpu 8"
    os.system(command)
    print (command)

    return namePrj




def AnalyzeDex(shaList,apkNoMainManager:ApkNoMainManager,pathDexFiles,core_index):
    # lambda function which tells you if an item is not None    
    isNotNone = lambda item: item is not None

    # structure of dataframe
    infoApks = {'NameApp': [],
                'MainActivity': [],
                'Receivers': [],
                'ProjectFolder':[]}
    
    # return manifest's path of a given unzipped apk
    get_path_manifest = lambda unzip_apk: os.path.join(pathOutputUnzip, unzip_apk, 'AndroidManifest.xml').replace("\\","/")
    # return list of apk that doesn't have main
    apk_noMain = list(filter(isNotNone, 
                            [AnalyzeManifest(get_path_manifest(sha), sha, infoApks,core_index)\
                                    for sha in shaList]))
        
        
    # creo il dataframe updated dal dizionario infoApks
    df_updated = pd.DataFrame(infoApks, columns = ['NameApp', 'MainActivity', 'Receivers','ProjectFolder'])

    # store the apks that doesn't have a main activity    
    # apkNoMainManager.write(apk_noMain)
        
    apkNoMainManager.add(apk_noMain)

    print("-----MANIFEST ANALIZZATI-----") 


    LaunchScript(df_updated,apk_noMain,pathDexFiles)



def LaunchScript(df_updated,apk_noMain,pathDexFiles):
    for dex in os.listdir(pathDexFiles):
        extension_file = dex.find(".dex")
        app_name = dex[:extension_file]
        print(app_name)
        
        if app_name not in apk_noMain:
            mainActivity = list(df_updated[df_updated["NameApp"]==app_name]["MainActivity"])[0]
            print(mainActivity)
            receivers = list(df_updated[df_updated["NameApp"]==app_name]["Receivers"])[0]
            print(receivers)
            if len(receivers) != 0:
                receivers = "r " + " ".join(receivers)
            else:
                receivers = ""

            projectFolder = list(df_updated[df_updated["NameApp"]==app_name]["ProjectFolder"])[0]
            command = analyzeHeadless + " " + ghidra_projects + " " + projectFolder + " -scriptPath " + ghidra_script\
                + " -postScript FCG_CFGs.py " + app_name + " " + mainActivity + " " + receivers\
                    + " -process " + str(dex) + " -noanalysis -max-cpu 4" 

            os.system(command)
            print (command)




