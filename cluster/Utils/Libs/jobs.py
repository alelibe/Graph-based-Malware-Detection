import wget
import os
import zipfile
from Data import directoryAPKs,pathOutputUnzip,axmldec,pathDexList,analyzeHeadless,ghidra_projects
from analyzeDex import AnalyzeManifest
import pandas as pd
import json


def downloadAPKs(shaList):
    for sha in shaList:
        url = 'https://androzoo.uni.lu/api/download?apikey=1ef38937bf841c4a90b49d0e756bd4980b56886822cd8f20d6cf18cd449d68c9&sha256='+sha
        wget.download(url,directoryAPKs)
    
    print("-----DOWNLOAD COMPLETED-----")



def unzipAPKs(shaList):
    for sha in shaList:
        pathAPK = os.path.join(directoryAPKs,sha+".apk").replace("\\","/")
        pathOutput = os.path.join(pathOutputUnzip, sha).replace("\\","/")

        try:
            with zipfile.ZipFile(pathAPK) as z:
                z.extractall(pathOutput)
        except:
            print("Invalid file", pathAPK)
        
    print("-----APK UNZIPPED-----")
        


def decodeManifest(shaList):
    for sha in shaList:
        pathAPK = os.path.join(directoryAPKs,sha+".apk").replace("\\","/")

        pathOutManifest = os.path.join(pathOutputUnzip, sha, "AndroidManifest.xml").replace("\\","/")
        command = axmldec + " -o " + pathOutManifest + " " + pathAPK
        os.system(command)

    print("-----MANIFEST DECODED-----")


def renameDex(shaList,core_index):

    for sha in shaList:
        pathUnzipApk = os.path.join(pathOutputUnzip,sha).replace("\\","/")

        for file in os.listdir(pathUnzipApk):
            if file.endswith(".dex"):
                path_dex_file = os.path.join(pathUnzipApk, file).replace("\\","/")
                new_name = sha + ".dex"
                path_dex_src = os.path.join(pathUnzipApk, new_name).replace("\\","/")
                os.rename(path_dex_file,path_dex_src)
                path_dex_src = os.path.join(pathDexList[core_index], new_name).replace("\\","/")

    
    print("-----DEX SAVED-----")




def importDex(path):
    # takes only last part of a path
    dexFile_index = os.path.basename(os.path.normpath(path))
    # takes only the index of path
    dexFile_index = dexFile_index.replace('DexFiles', '')
    # create name project for Ghidra
    namePrj = "Dataset" + dexFile_index
    
    command = analyzeHeadless + " " + ghidra_projects + " " + namePrj + " -import " + path + " -recursive -max-cpu 8"
    os.system(command)
    print (command)





def AnalyzeDex(shaList):
    # lambda function which tells you if an item is not None    
    isNotNone = lambda item: item is not None

    # structure of dataframe
    infoApks = {'NameApp': [],
                'MainActivity': [],
                'Receivers': [],
                'ProjectFolder':[]}
    
    # return manifest's path of a given unzipped apk
    get_path_manifest = lambda unzip_apk: os.path.join(pathOutputUnzip, unzip_apk, 'AndroidManifest.xml').replace("\\","/")
    # return list of apk that doesn't have main
    apk_noMain = list(filter(isNotNone, 
                            [AnalyzeManifest(get_path_manifest(sha), sha, infoApks)\
                                    for sha in shaList]))
        
        
    # creo il dataframe updated dal dizionario infoApks
    df_updated = pd.DataFrame(infoApks, columns = ['NameApp', 'MainActivity', 'Receivers','ProjectFolder'])

    # store the apks that doesn't have a main activity    
    with open("./apk_noMain.json", "a") as jsonFile:
        json.dump(apk_noMain, jsonFile)
        
    print("-----MANIFEST ANALIZZATI-----") 
