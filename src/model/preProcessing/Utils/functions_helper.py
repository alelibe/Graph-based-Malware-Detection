import json
import os
import collections
from Utils.weaklyConnected import Graph,WCC
from Utils.config import graphs,preprocessedGraphs
from torch_geometric.data import Batch


def create_batch_data(one_batch: Batch):
    acfg_list = []
    acfg_position = [0]
    acfg_count = 0
    
    assert len(one_batch.external_list) == len(one_batch.function_edges) == len(one_batch.local_acfgs) == len(one_batch.hash), "size of each component must be equal to each other"
    
    for item in one_batch.local_acfgs:
        for acfg in item:
            # print("acfg: ", acfg)
            acfg_list.append(acfg)
        acfg_count += len(item)
        # print("acfg_count ", acfg_count)
        acfg_position.append(acfg_count)
    
    if len(one_batch.local_acfgs) == 1 and len(one_batch.local_acfgs[0]) == 0:
        return (None for _ in range(6))
    else:
        acfg_batch = Batch.from_data_list(acfg_list)
        return acfg_batch, acfg_position, one_batch.hash, one_batch.external_list, one_batch.function_edges, one_batch.targets
    


def function_name_list(path):
    with open(path) as jsonFile:
        fcg = json.load(jsonFile)
 
    #create funtion_names list
    deque_node = collections.deque([])

    for node in fcg["nodes"]:
        if not "EXTERNAL" in str(node):
            deque_node.appendleft(node)
        else:
            deque_node.append(node)


    return deque_node


def function_edges_list(deque_node,path_fcg,directed_graph):
    #create function_edges list
    with open(path_fcg) as jsonFile:
        fcg = json.load(jsonFile)

    list_edges = []
    edge_src = []
    edge_target = []
    for edge in fcg["edges"]:
        # print(edge[0],edge[1])
        index_src = deque_node.index(edge[0])
        edge_src.append(index_src)
        index_target = deque_node.index(edge[1])
        edge_target.append(index_target)

        directed_graph.add_edge(index_src,index_target)

    list_edges.append(edge_src)
    list_edges.append(edge_target)

    return list_edges,directed_graph


def acfg_list(deque_node,path_acfg):
    acfg_list = []
    for node in deque_node:
        if not "EXTERNAL" in node:
            path_to_cfg = os.path.join(path_acfg,"cfg_"+node+".json").replace("\\","/")
            # print(path_to_cfg)
            #create acfg_list
            with open(path_to_cfg) as jsonFile:
                cfg = json.load(jsonFile)

            
            block_edges = []
            block_features = []
            edge_src = []
            edge_target = []
            list_nodes = cfg["nodes"]

            
            for edge in cfg["edges"]:
                index_src = list_nodes.index(edge[0])
                edge_src.append(index_src)
                index_target = list_nodes.index(edge[1])
                edge_target.append(index_target)

            block_edges.append(edge_src)
            block_edges.append(edge_target)

            for node in list_nodes:
                block_features.append(list(cfg["basic_blocks"][node]["features"].values()))


            dict_block = {
                            'block_number': len(list_nodes), 
                            'block_edges': block_edges,
                            'block_features': block_features
                        }

            acfg_list.append(dict_block)
            

    return acfg_list