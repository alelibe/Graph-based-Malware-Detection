# Python3 code for the above algorithm
from typing import List

class Graph:
	def __init__(self, vertices: int):
		self.vertices = vertices
		self.adjacency_list = [[] for _ in range(vertices)]
# Use of NoEdge(int, int)
		#prevents duplication of edges
	def add_edge(self, u: int, v: int):
		if self.no_edge(u, v):
			self.adjacency_list[u].append(v)


	# Returns true if there does NOT exist
	# any edge from u to v
	def no_edge(self, u: int, v: int):
		return v not in self.adjacency_list[u]

class WCC:
	def __init__(self, directed_graph: Graph):
		self.directed_graph = directed_graph
# Finds all the connected components
# of the given undirected graph
	def connected_components(self, undirected_graph: Graph):
		connected_components = []
		is_visited = [False for _ in range(undirected_graph.vertices)]

		for i in range(undirected_graph.vertices):
			if not is_visited[i]:
				component = []
				self.find_connected_component(i, is_visited, component, undirected_graph)
				connected_components.append(component)

		return connected_components
# Finds a connected component
	# starting from source using DFS
	def find_connected_component(self, src: int, is_visited: List[bool], component: List[int], undirected_graph: Graph):
		is_visited[src] = True
		component.append(src)

		for v in undirected_graph.adjacency_list[src]:
			if not is_visited[v]:
				self.find_connected_component(v, is_visited, component, undirected_graph)

	def weakly_connected_components(self):
	#Step 1: Construct the
		# underlying undirected graph
		undirected_graph = Graph(self.directed_graph.vertices)
		for u in range(self.directed_graph.vertices):
			for v in self.directed_graph.adjacency_list[u]:
				undirected_graph.add_edge(u, v)
				undirected_graph.add_edge(v, u)
# Step 2: Find the connected components
	# of the undirected grap
		return self.connected_components(undirected_graph)
        
#Driver code
def main():
    directed_graph = Graph(7)

    directed_graph.add_edge(2, 6)
    directed_graph.add_edge(2, 8)
    directed_graph.add_edge(8, 12)
    directed_graph.add_edge(10, 14)
    directed_graph.add_edge(10, 18)

    # directed_graph.add_edge(0, 1)
    # directed_graph.add_edge(0, 2)
    # directed_graph.add_edge(3, 1)
    # directed_graph.add_edge(3, 2)
    # directed_graph.add_edge(4, 5)



    weakly_connected_components = WCC(directed_graph).weakly_connected_components()

    for index, component in enumerate(weakly_connected_components, start=1):
        print("Component {}: {}".format(index, component))

    print(len(weakly_connected_components))


if __name__ == "__main__":
	main()
