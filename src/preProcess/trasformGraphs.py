# This code create one graph for each apk, so encloses the CFG and FCG information in a single graph
import json
import os
import collections
from weaklyConnected import Graph,WCC
from Utils.config import graphs,preprocessedGraphs

def function_name_list(path):
    with open(path) as jsonFile:
        fcg = json.load(jsonFile)
 
    #create funtion_names list
    deque_node = collections.deque([])

    for node in fcg["nodes"]:
        if not "EXTERNAL" in str(node):
            deque_node.appendleft(node)
        else:
            deque_node.append(node)


    return deque_node


def function_edges_list(deque_node,path_fcg,directed_graph):
    #create function_edges list
    with open(path_fcg) as jsonFile:
        fcg = json.load(jsonFile)

    list_edges = []
    edge_src = []
    edge_target = []
    for edge in fcg["edges"]:
        # print(edge[0],edge[1])
        index_src = deque_node.index(edge[0])
        edge_src.append(index_src)
        index_target = deque_node.index(edge[1])
        edge_target.append(index_target)

        directed_graph.add_edge(index_src,index_target)

    list_edges.append(edge_src)
    list_edges.append(edge_target)

    return list_edges,directed_graph


def acfg_list(deque_node,path_acfg):
    acfg_list = []
    for node in deque_node:
        if not "EXTERNAL" in node:
            path_to_cfg = os.path.join(path_acfg,"cfg_"+node+".json").replace("\\","/")
            # print(path_to_cfg)
            #create acfg_list
            with open(path_to_cfg) as jsonFile:
                cfg = json.load(jsonFile)

            
            block_edges = []
            block_features = []
            edge_src = []
            edge_target = []
            list_nodes = cfg["nodes"]

            
            for edge in cfg["edges"]:
                index_src = list_nodes.index(edge[0])
                edge_src.append(index_src)
                index_target = list_nodes.index(edge[1])
                edge_target.append(index_target)

            block_edges.append(edge_src)
            block_edges.append(edge_target)

            for node in list_nodes:
                block_features.append(list(cfg["basic_blocks"][node]["features"].values()))


            dict_block = {
                            'block_number': len(list_nodes), 
                            'block_edges': block_edges,
                            'block_features': block_features
                        }

            acfg_list.append(dict_block)
            

    return acfg_list


if __name__ == '__main__': 
    # path = "C:/Users/Alessia/Desktop/provaGraphs"

    for apk in os.listdir(graphs):
        apk_fcg_path = os.path.join(graphs,apk,"fcg.json").replace("\\","/")
        apk_acfg_path = os.path.join(graphs,apk,"ACFG").replace("\\","/")

        deque_node = function_name_list(apk_fcg_path)
        directed_graph = Graph(len(list(deque_node)))
        list_edges,directed_graph = function_edges_list(deque_node,apk_fcg_path,directed_graph)
        acfg_lists = acfg_list(deque_node,apk_acfg_path)


        weakly_connected_components = WCC(directed_graph).weakly_connected_components()

        # for index, component in enumerate(weakly_connected_components, start=1):
        #     print("Component {}: {}".format(index, component))

        #if there are disconnected graphs, we link one of the nodes of the disconnected graph with
        #one of the nodes of main graph
        if len(weakly_connected_components) > 1:
            print("There is a disconnected graph...")
            for i in range(len(weakly_connected_components)):
                graph_disconnected = weakly_connected_components[i+1]
                last_node_index = len(graph_disconnected[0])-1
                list_src_edge = list_edges[0]
                list_target_edge = list_edges[1]
                
                list_src_edge.append(graph_disconnected[last_node_index])
                list_target_edge.append(list_src_edge[0])


        global_graph = {
                'funtion_edges': list_edges,
                'acfg_list': acfg_lists,
                'function_names': list(deque_node),
                'hash': str(apk),
                'function_number': len(list(deque_node))
            }
             

        path_preprocessedGraphs = preprocessedGraphs + apk + ".json"
        # path_preprocessGraph = "C:/Users/Alessia/Desktop/GraphsDataset/preProcessedGraphs/"+apk+".json"
        with open(path_preprocessedGraphs, "w") as outfile:
            json.dump(global_graph, outfile)





