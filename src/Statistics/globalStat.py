import os
import json
from Utils.config import ghidra_outputs,malgraph_drebin_meta,stat



# update global statistics:
# path -> the path of the directory that contain the json file of the global stat
# method -> the method whose parameters need to be updated
# num -> the quantity to add to the parameter
# total -> a boolean that indicated if we have to update the counting of total or of handled
def updateGlobalStat(path,method,num,date,global_stat,total):
#     with open(os.path.join(path, "stat_global.json"),'r') as f:
#         data = json.load(f)
    
    if total: 
        global_stat[date][method]["total"] += num
    else:
        global_stat[date][method]["handled"] += num
    
    
    path = os.path.join(path, "stat_global.json")
    with open(path, "w") as jsonFile:
        json.dump(global_stat, jsonFile)
        

        
        
def readAndUpdateStat(stat_file,ghidra_output,date,global_stat):
    with open(stat_file,"r") as f:
        data_stat = json.load(f)
        
        num_total = data_stat["startActivity"]["total"]
        num_handled = data_stat["startActivity"]["handled"]

        updateGlobalStat(ghidra_output,"startActivity",num_total,date,global_stat,True)
        updateGlobalStat(ghidra_output,"startActivity",num_handled,date,global_stat,False)


        num_total = data_stat["startService"]["total"]
        num_handled = data_stat["startService"]["handled"]

        updateGlobalStat(ghidra_output,"startService",num_total,date,global_stat,True)
        updateGlobalStat(ghidra_output,"startService",num_handled,date,global_stat,False)


        num_total = data_stat["onClick"]["total"]
        num_handled = data_stat["onClick"]["handled"]

        updateGlobalStat(ghidra_output,"onClick",num_total,date,global_stat,True)
        updateGlobalStat(ghidra_output,"onClick",num_handled,date,global_stat,False)


        num_total = data_stat["switch"]["total"]

        updateGlobalStat(ghidra_output,"switch",num_total,date,global_stat,True)




if __name__ == '__main__':
    with open(malgraph_drebin_meta,"r") as fmeta:
        malgraph_meta = json.load(fmeta)
        

    global_stat = dict()
    for directory in os.listdir(ghidra_outputs):
        dir_app = os.path.join(ghidra_outputs, directory).replace("\\","/")
        
        #retry the index of the apk in the malgraph_meta to know the date
        apk_index = next((index for (index, d) in enumerate(malgraph_meta) if d["sha256"] == str(directory)), None)
        date = malgraph_meta[apk_index]["dex_date"]
        rindex = str(date).rindex("-")
        date = str(date[:rindex])
                        
        if not(date in global_stat):
            global_stat[date] = copy.deepcopy(stat)
                    
        if(os.path.isdir(dir_app)):
            for file in os.listdir(dir_app):
                if str(file) == "statistics.json":
                    stat_file = os.path.join(dir_app, file).replace("\\","/")
                    
                    readAndUpdateStat(stat_file,ghidra_outputs,date,global_stat)
                    

    print("-----GLOBAL STATISTICS COMPLETED-----")