import multiprocessing as mp
import os
import time
import pandas as pd
import json
from Utils.utils_analyzeDex import AnalyzeManifest,LaunchScript
from Utils.Data import pathOutputUnzip

isNotNone = lambda item: item is not None


infoApks = {'NameApp': [],
            'MainActivity': [],
            'Receivers': [],
            'ProjectFolder':[]}


if __name__ == '__main__': 
    get_path_manifest = lambda unzip_apk: os.path.join(pathOutputUnzip, unzip_apk, 'AndroidManifest.xml').replace("\\","/")
    apk_noMain = list(filter(isNotNone, 
                            [AnalyzeManifest(get_path_manifest(unzip_apk), unzip_apk, infoApks)\
                                    for unzip_apk in os.listdir(pathOutputUnzip)]))
        
        
    # creo il dataframe updated dal dizionario infoApks
    df_updated = pd.DataFrame(infoApks, columns = ['NameApp', 'MainActivity', 'Receivers','ProjectFolder'])

    # store the apks that doesn't have a main activity    
    with open("./apk_noMain.json", "a") as jsonFile:
        json.dump(apk_noMain, jsonFile)
        
    print("-----MANIFEST ANALIZZATI-----") 

 
    start_time = time.time()
    pathDex1 = "C:/Users/Alessia/Desktop/Unimi/Tesi/Dataset/DexFiles1"
    pathDex2 = "C:/Users/Alessia/Desktop/Unimi/Tesi/Dataset/DexFiles2"

    array_prj = [pathDex1,pathDex2]

    pool = mp.Pool(mp.cpu_count())

    pool.starmap_async(LaunchScript, [(df_updated, apk_noMain, prj) for prj in array_prj])

    pool.close()
    pool.join()
    print("Process finished --- %s seconds ---" % (time.time() - start_time))