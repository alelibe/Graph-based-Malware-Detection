
import os
import zipfile
from xml.dom import minidom
import pandas as pd

direProva = os.path.join("C:/Users","Alessia","Desktop","missApk")
direUnzip = os.path.join("C:/Users","Alessia","Desktop","miss_unzip")
axmldec = "C:/Users/Alessia/Downloads/axmldec-1.2.0-windows-x64/axmldec.exe"


def get_main_activity(xmlManifest):
    """
        Return the name of the main activity
    """
    x = set()
    y = set()
    for item in xmlManifest.getElementsByTagName("activity") :
        for sitem in item.getElementsByTagName( "action" ) :
            val = sitem.getAttribute( "android:name" )
            if val == "android.intent.action.MAIN" :
                x.add( item.getAttribute( "android:name" ) )

        for sitem in item.getElementsByTagName( "category" ) :
            val = sitem.getAttribute( "android:name" )
            if val == "android.intent.category.LAUNCHER" :
                y.add( item.getAttribute( "android:name" ) )

    z = x.intersection(y)
    if len(z) > 0:
        # il main esiste
        return z.pop().split(".")[-1]
    return None 


def get_receivers(xmlManifest) :
    """
        Return the android:name attribute of all receivers
    """
    l = []
    for item in xmlManifest.getElementsByTagName("receiver") :
        value = item.getAttribute("android:name")
        l.append(str(value).split(".")[-1])
    return l

def takeReceivers(receivers):
    input_receivers = []
    for r in receivers:
        input_receivers.append(r.split(".")[-1])
        
    return input_receivers


def AnalyzeManifest(manifest,app_name,infoApks):
    #analizzo l'apk
    xml = minidom.parse(manifest)
    mainActivity = get_main_activity(xml)
    if mainActivity is None:
#         print("This apk doesn't have main: " + app_name)
        return app_name
    else:
        
        receivers = get_receivers(xml)

        input_receivers = takeReceivers(receivers)

        infoApks['NameApp'].append(app_name)
        infoApks['MainActivity'].append(mainActivity)
        infoApks['Receivers'].append(input_receivers)
        
        # # list of all possible path for the argument app_name
        # dexFilesPathList = [os.path.join(path, app_name + ".dex").replace("\\","/") for path in pathDexList]
        # # list of boolean values indicating which path of dexFilesPathList exists
        # existPath = [os.path.exists(path) for path in dexFilesPathList]
        # # take the index of existPath that contains the value True
        # index = existPath.index(True)
        #namePrj = "Dataset"+str(core_index)+"/DexFiles"+str(core_index)
        #infoApks['ProjectFolder'].append(namePrj)
        
        
        return None

def decodeManifest():
    for apk in os.listdir(direProva):
        pathAPK = os.path.join(direProva,apk).replace("\\","/")
        extension_file = apk.find(".apk")
        app_name = apk[:extension_file]

        pathOutManifest = os.path.join(direUnzip, app_name, "AndroidManifest.xml").replace("\\","/")
        command = axmldec + " -o " + pathOutManifest + " " + pathAPK
        os.system(command)

    print("-----MANIFEST DECODED-----")

def unzip():
    for apk in os.listdir(direProva):
        pathAPK = os.path.join(direProva,apk).replace("\\","/")
        extension_file = apk.find(".apk")
        app_name = apk[:extension_file]
        pathOutput = os.path.join(direUnzip, app_name).replace("\\","/")

    
        # try:
        #     with zipfile.ZipFile(pathAPK, 'r') as z:
        #         z.extractall(pathOutput)
        #     print("-----APK " + apk + " UNZIPPED-----")
        # except:
        #     print("Invalid file", pathAPK)
        command = "apktool d -s " + pathAPK + " -o " + pathOutput
        os.system(command)

# decodeManifest()


# infoApks = {'NameApp': [],
#                 'MainActivity': [],
#                 'Receivers': []}

# for apk in os.listdir(direUnzip):
#     manifest = os.path.join(direUnzip, apk, 'AndroidManifest.xml').replace("\\","/")
#     AnalyzeManifest(manifest,apk,infoApks)

# df_updated = pd.DataFrame(infoApks, columns = ['NameApp', 'MainActivity', 'Receivers'])
# print(df_updated.head())

unzip()
