import json
import os
from Utils.config import graphs


logic_op = ["and", "or", "xor"]
arith_op= ["add","sub","mul","div","rem"]
const_num_op = ["const_4", "const_16", "const", "const_high_16", "const_wide_16", "const_wide_32",
               "const_wide", "const_wide_high_16"]
const_string_op = ["const_string", "const_string_jumbo"]
compare_op = ["cmpl_float","cmpg_float","cmpl_double","cmpg_double","cmp_long"]
jump_op = ["goto","goto_16","goto_32","if_eq","if_ne","if_lt","if_ge","if_gt","if_le","if_eqz","if_nez",
          "if_ltz","if_gez","if_gtz","if_lez"]
new_op = ["new_instance","new_array","filled_new_array","filled_new_array_range"]


def createDirACFG(app):
    acfg_folder = os.path.join(app, "ACFG").replace("\\","/")
    if not(os.path.exists(acfg_folder)):
        os.mkdir(acfg_folder)
        
    return acfg_folder

# return the number of instructions in each basic block
def getNumIns(v):
    numIns = len(v['disass'])
    return numIns

# return the number of call instructions in each basic block
def getCalls(disass_arr):
    numCalls = 0
    for ins in disass_arr:
        if "invoke" in str(ins):
            numCalls += 1
            
    return numCalls

# return the number of jump instructions in each basic block
def getJumps(disass_arr):
    jumps = 0
    
    for ins in disass_arr:
        smali_code = str(ins).split(" ")[0]
        if any(op == smali_code for op in jump_op):
            jumps += 1
         
    return jumps


# return the number of logic instructions in each basic block
def getLogicIns(disass_arr):
    numLIns = 0
    for ins in disass_arr:
        if any(op in ins for op in logic_op):
            numLIns += 1

    return numLIns

# return the number of arithmetic instructions in each basic block
def getArithIns(disass_arr):
    numAIns = 0
    for ins in disass_arr:
        if any(op in ins for op in arith_op):
            numAIns += 1

    return numAIns

# return the number of const-int/float/double/.. and const-string instructions in each basic block
def getConst(disass_arr):
    const_num = 0
    const_string = 0
    
    for ins in disass_arr:
        smali_code = str(ins).split(" ")[0]
        if any(op == smali_code for op in const_num_op):
            const_num += 1
        if any(op == smali_code for op in const_string_op):
            const_string += 1
            
    return const_num,const_string

# return the number of move instructions in each basic block
def getMoveIns(disass_arr):
    moveIns = 0
    for ins in disass_arr:
        if "move" in str(ins):
            moveIns += 1
            
    return moveIns
            
# return the number of compare instructions in each basic block
def getCompareIns(disass_arr):
    compareIns = 0
    for ins in disass_arr:
        if any(op in ins for op in compare_op):
            compareIns += 1

    return compareIns

# return the number of new instructions in each basic block
def getNewIns(disass_arr):
    newIns = 0
    
    for ins in disass_arr:
        smali_code = str(ins).split(" ")[0]
        if any(op == smali_code for op in new_op):
            newIns += 1
         
    return newIns

def getTerminationIns(disass_arr):
    returnIns = 0
    for ins in disass_arr:
        if "return" in str(ins):
            returnIns += 1
            
    return returnIns
         
    
# directory where we have all of analyzed app            
# graphs = "/home/laser/Dataset/Graphs"
for folder in os.listdir(graphs):
    app = os.path.join(graphs, folder).replace("\\","/")
    if os.path.isdir(app):
        acfg_folder = createDirACFG(app)
        
        # for each app, we iterate over the files that refer to the json of the cfg
        for file in os.listdir(app):
            if file.startswith("cfg"):
                cfg_json = os.path.join(app, file).replace("\\","/")
                f = open(cfg_json)
                
                data = json.load(f)
                bblocks = data['basic_blocks']
                for k,v in zip(bblocks.keys(), bblocks.values()):
                    # create the field "features" in the json of the ACFG
                    bblocks[k]['features'] = {"numIns": 0, "numLIns": 0, "numAIns":0, "numCalls":0, 
                                              "jump": 0, "const-num": 0, "const-string": 0, "moveIns": 0, 
                                              "compareIns": 0, "new": 0, "termination": 0}
                    disass_arr = v['disass']
    
                    numIns = getNumIns(v)
                    numLIns = getLogicIns(disass_arr)
                    numAIns = getArithIns(disass_arr)
                    numCalls = getCalls(disass_arr)
                    numJumps = getJumps(disass_arr)
                    const_num, const_string = getConst(disass_arr)
                    moveIns = getMoveIns(disass_arr)
                    compareIns = getCompareIns(disass_arr)
                    newIns = getNewIns(disass_arr)
                    termination = getTerminationIns(disass_arr)
                    
                    bblocks[k]['features']['numIns'] = numIns
                    bblocks[k]['features']['numLIns'] = numLIns
                    bblocks[k]['features']['numAIns'] = numAIns
                    bblocks[k]['features']['numCalls'] = numCalls
                    bblocks[k]['features']['jump'] = numJumps
                    bblocks[k]['features']['const-num'] = const_num
                    bblocks[k]['features']['const-string'] = const_string
                    bblocks[k]['features']['moveIns'] = moveIns
                    bblocks[k]['features']['compareIns'] = compareIns
                    bblocks[k]['features']['new'] = newIns
                    bblocks[k]['features']['termination'] = termination
                    
                    
                with open(os.path.join(acfg_folder, file).replace("\\","/"), "w") as jsonFile:
                    json.dump(data,jsonFile)


            print("ACFG completed for " + app)