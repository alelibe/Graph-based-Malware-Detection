import os
from xml.dom import minidom
from Utils.Data import analyzeHeadless,ghidra_projects,ghidra_script,pathDexList



def get_main_activity(xmlManifest):
    """
        Return the name of the main activity
    """
    x = set()
    y = set()
    for item in xmlManifest.getElementsByTagName("activity") :
        for sitem in item.getElementsByTagName( "action" ) :
            val = sitem.getAttribute( "android:name" )
            if val == "android.intent.action.MAIN" :
                x.add( item.getAttribute( "android:name" ) )

        for sitem in item.getElementsByTagName( "category" ) :
            val = sitem.getAttribute( "android:name" )
            if val == "android.intent.category.LAUNCHER" :
                y.add( item.getAttribute( "android:name" ) )

    z = x.intersection(y)
    if len(z) > 0:
        # il main esiste
        return z.pop().split(".")[-1]
    return None 


def get_receivers(xmlManifest) :
    """
        Return the android:name attribute of all receivers
    """
    l = []
    for item in xmlManifest.getElementsByTagName("receiver") :
        value = item.getAttribute("android:name")
        l.append(str(value).split(".")[-1])
    return l

def takeReceivers(receivers):
    input_receivers = []
    for r in receivers:
        input_receivers.append(r.split(".")[-1])
        
    return input_receivers


# analizzo i manifest e memorizzo le seguenti info: mainActivity dell'app, eventuali receiver e le classi.dex
def AnalyzeManifest(manifest,app_name,infoApks):
    #analizzo l'apk
    xml = minidom.parse(manifest)
    mainActivity = get_main_activity(xml)
    if mainActivity is None:
#         print("This apk doesn't have main: " + app_name)
        return app_name
    else:
        receivers = get_receivers(xml)

        input_receivers = takeReceivers(receivers)

        infoApks['NameApp'].append(app_name)
        infoApks['MainActivity'].append(mainActivity)
        infoApks['Receivers'].append(input_receivers)
        
        # list of all possible path for the argument app_name
        dexFilesPathList = [os.path.join(path, app_name + ".dex").replace("\\","/") for path in pathDexList]
        # list of boolean values indicating which path of dexFilesPathList exists
        existPath = [os.path.exists(path) for path in dexFilesPathList]
        # take the index of existPath that contains the value True
        index = existPath.index(True)
        namePrj = "Dataset"+str(index)+"/DexFiles"+str(index)
        infoApks['ProjectFolder'].append(namePrj)
        
        # dex_file_path = os.path.join(pathDexFiles1, app_name + ".dex").replace("\\","/")
        # if os.path.exists(dex_file_path):
        #     infoApks['ProjectFolder'].append("Dataset1/DexFiles1")
        # else:
        #     infoApks['ProjectFolder'].append("Dataset2/DexFiles2")
        
        return None

def LaunchScript(df_updated,apk_noMain,path):
    for dex in os.listdir(path):
        extension_file = dex.find(".dex")
        app_name = dex[:extension_file]
        print(app_name)
        
        if app_name not in apk_noMain:
            mainActivity = list(df_updated[df_updated["NameApp"]==app_name]["MainActivity"])[0]
            print(mainActivity)
            receivers = list(df_updated[df_updated["NameApp"]==app_name]["Receivers"])[0]
            print(receivers)
            if len(receivers) != 0:
                receivers = "r " + " ".join(receivers)
            else:
                receivers = ""

            projectFolder = list(df_updated[df_updated["NameApp"]==app_name]["ProjectFolder"])[0]
            command = analyzeHeadless + " " + ghidra_projects + " " + projectFolder + " -scriptPath " + ghidra_script\
                + " -postScript FCG_CFGs.py " + app_name + " " + mainActivity + " " + receivers\
                    + " -process " + str(dex) + " -noanalysis -max-cpu 4" 

            os.system(command)
            print (command)