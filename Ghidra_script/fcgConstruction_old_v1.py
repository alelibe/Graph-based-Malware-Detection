#TODO write a description for this script
#@author 
#@category _NEW_
#@keybinding 
#@menupath 
#@toolbar 


from binascii import hexlify
import ghidra.program.model.address.GenericAddress as Address
import codecs

def subOffset(addr,offset):
	"""subtract an offset to a given address"""
	for i in range(offset):
		addr = addr.previous()
	
	return addr
		
def find_tag_block(mem,addr,tag=1):
	byte = mem.getByte(addr)
	while byte != tag:
		addr = subOffset(addr,1)
		byte = mem.getByte(addr)
	return addr

def getSize(mem,addr):
	size = "0x"
	byte = mem.getByte(addr)
	size += str(byte).zfill(2)
	
	byte = mem.getByte(addr.next())
	size += str(byte).zfill(2)
	
	return int(size,16)
	

def getNameMethod(addr):
	addr_block3 = subOffset(addr,5)
	mem = currentProgram.getMemory()
	addr_block2 = find_tag_block(mem,addr_block3).previous()
	addr_block1 = find_tag_block(mem,addr_block2)

	size = getSize(mem, addr_block1.next())
	
	text = ""
	addr_block1 = addr_block1.next().next().next()
	for i in range(size):
		byte = hex(mem.getByte(addr_block1))[2:]
		text += str(byte).zfill(2)
		addr_block1 = addr_block1.next()

	
	u = codecs.decode(text, "hex").decode('utf-8')
	print u
	

listing = currentProgram.getListing()
main_func = getGlobalFunctions("onCreate_android.os.Bundle_void")[0] # assume there's only 1 function named 'main'
addrSet = main_func.getBody()
ins_iter = listing.getInstructions(addrSet, True)
fm = currentProgram.getFunctionManager()

symTable = currentProgram.getSymbolTable()

while ins_iter.hasNext():
	ins = ins_iter.next()
	if "invoke" in str(ins):
		index_cpool = int(str(ins).split()[1],16)
		symbol = symTable.getSymbols('CPOOL['+str(index_cpool)+']').next()

		addr = symbol.getAddress()
		name = getNameMethod(addr)
		print name
		
		
		
			


	