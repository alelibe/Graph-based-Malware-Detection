#TODO write a description for this script
#@author 
#@category _NEW_
#@keybinding 
#@menupath 
#@toolbar 

import codecs
import json

def sumOffset(addr,offset):
	"""subtract an offset to a given address"""
	for i in range(offset):
		addr = addr.next()
	
	return addr

def get_jumpFrom(addr):
	refs = getReferencesFrom(addr)
	addr_new = refs[0].getToAddress()

	return addr_new

def getSize(mem,addr):
	addr_size = addr.next()
	size = mem.getShort(addr_size)

	return size


def getClassName(addr):
	mem = currentProgram.getMemory()

	addr_block1_caller = sumOffset(addr,1)
	addr_block2_called = get_jumpFrom(addr_block1_caller)

	addr_block2_caller = sumOffset(addr_block2_called,1)
	addr_block3_called = get_jumpFrom(addr_block2_caller)

	size = getSize(mem,addr_block3_called)
	text = ""
	addr_className = sumOffset(addr_block3_called,3)
	for i in range(size):
		byte = hex(mem.getByte(addr_className))[2:]
		text += str(byte).zfill(2)
		addr_className = addr_className.next()

	
	u = codecs.decode(text, "hex").decode('utf-8')
	return u



def getMethodName(addr):
	mem = currentProgram.getMemory()

	addr_block1_caller = sumOffset(addr,3)
	addr_block2_called = get_jumpFrom(addr_block1_caller)

	addr_block2_caller = sumOffset(addr_block2_called,1)
	addr_block3_called = get_jumpFrom(addr_block2_caller)

	size = getSize(mem,addr_block3_called)
	text = ""
	addr_methodName = sumOffset(addr_block3_called,3)
	for i in range(size):
		byte = hex(mem.getByte(addr_methodName))[2:]
		text += str(byte).zfill(2)
		addr_methodName = addr_methodName.next()

	
	u = codecs.decode(text, "hex").decode('utf-8')
	return u
	
	

listing = currentProgram.getListing()
main_func = getGlobalFunctions("onCreate_android.os.Bundle_void")[0] 
name_entry = main_func.getName()
addrSet = main_func.getBody()
ins_iter = listing.getInstructions(addrSet, True)
fm = currentProgram.getFunctionManager()

# creo l'insieme di nodi e di archi
nodes_list, edges_list = [], []
#aggiungo l'entry del grafo
nodes_list.append(str(name_entry))

symTable = currentProgram.getSymbolTable()

while ins_iter.hasNext():
	ins = ins_iter.next()
	if "invoke" in str(ins):
		addr_cpool = get_jumpFrom(ins.getAddress())

		className = getClassName(addr_cpool)
		methodName = getMethodName(addr_cpool)
		#print className + "_" + methodName

		node = className + "_" + methodName

		nodes_list.append(str(node))
		edges_list.append((str(name_entry), str(node)))

fcg_dict = {
                'nodes': nodes_list,
                'edges': edges_list
            }
             
print fcg_dict
with open("//wsl.localhost/Ubuntu-20.04/root/Documents/Tesi/Ghidra/outputs/FCG/fcg_MainActivity_howllarm.json", "w") as outfile:
    json.dump(fcg_dict, outfile)

