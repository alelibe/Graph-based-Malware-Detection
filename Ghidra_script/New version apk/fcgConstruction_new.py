#TODO write a description for this script
#@author 
#@category _NEW_
#@keybinding 
#@menupath 
#@toolbar 

import codecs
import json


def isFunction(fm,addr):
	bool = fm.isInFunction(addr)

	return bool

def get_jumpFrom(addr):
	refs = getReferencesFrom(addr)
	jump = refs[0]

	return jump

listing = currentProgram.getListing()
fm = currentProgram.getFunctionManager()
funcs = fm.getFunctions(True)
for f in funcs:
	if "onCreate" in str(f.getName()):
		body = f.getBody()
		name_entry = f.getName()

ins_iter = listing.getInstructions(body, True)

# creo l'insieme di nodi e di archi
nodes_list, edges_list = [], []
#aggiungo l'entry del grafo
nodes_list.append(name_entry)

while ins_iter.hasNext():
	ins = ins_iter.next()
	if "invoke" in str(ins):
		addr_toJump = get_jumpFrom(ins.getAddress()).getToAddress()
		if isFunction(fm,addr_toJump):
			methodName = str(fm.getFunctionAt(addr_toJump))
		else:
			methodName = str(get_jumpFrom(addr_toJump))[2:]

		nodes_list.append(methodName)
		edges_list.append((name_entry, methodName))
		

fcg_dict = {
                'nodes': nodes_list,
                'edges': edges_list
            }
             
with open("//wsl.localhost/Ubuntu-20.04/root/Documents/Tesi/Ghidra/outputs/FCG/fcg_test.json", "w") as outfile:
    json.dump(fcg_dict, outfile)


