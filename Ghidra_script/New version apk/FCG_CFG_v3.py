#TODO write a description for this script
#@author 
#@category _NEW_
#@keybinding 
#@menupath 
#@toolbar 


from ghidra.program.model.block import BasicBlockModel
from ghidra.util.task import TaskMonitor
from ghidra.util.task import ConsoleTaskMonitor
import json
import os
import ghidra.app.script
import Utils

#concatenate = False --> restuisco il nome della classe a cui appartiene il metodo
#concatenate = True --> concateno metodo_classe
def parseNameSpace(namespace, concatenate = False, sep = "_"):
	if not(concatenate):
		className = namespace.split("::")[-1]
		end_index = className.find(" ")
		return className[:end_index]
	else:
		splitName = namespace.split("::")
		return splitName[-1] + sep + splitName[-2]


def buildCFG(name):
	bbm = BasicBlockModel(currentProgram)
	monitor = ConsoleTaskMonitor()
	
	
	body = None
	funcs = currentProgram.getFunctionManager().getFunctions(True)
	for f in funcs:
		nameSpace = str(f.getParentNamespace())
		className = parseNameSpace(nameSpace)
		functionName = str(f.getName()) 
		if name in functionName + "_" + className:
			body = f.getBody()
			

	# creo l'insieme di nodi e di archi
	nodes_cfg, edges_cfg = [], []
	# creo la lista che conterr√† l'assembly del blocco
	disass = []
	# basic block's features
	bbs_dict = dict()

	if body == None:
		raise Exception("Body is None")

	blocks = bbm.getCodeBlocksContaining(body, monitor)

	block = blocks.next()
	#memorizzo l'inizio del blocco precedente
	block_prec_start = block.minAddress
	ins_prec = " "
	while block:
		listing = currentProgram.getListing()
	    	ins_iter = listing.getInstructions(block, True)
		
		block_start = block.minAddress
		nodes_cfg.append(str(block_start))
		if ("if" in str(ins_prec) and block_start != block_prec_start):
			edges_cfg.append((str(block_prec_start), str(block_start)))

		if not("if" in str(ins_prec) or "go" in str(ins_prec) or "return" in str(ins_prec)) and block_start != block_prec_start:
			edges_cfg.append((str(block_prec_start), str(block_start)))

		block_prec_start = block.minAddress
		

		ins = ins_iter.next()
		while ins:
			ins_prec = ins
			disass.append(str(ins))
			flows = ins.getFlows()
			if ("if" in str(ins) or "go" in str(ins)) and len(flows) == 1:
				addrSucc = flows[0]
				edges_cfg.append((str(block_start), str(addrSucc)))
				
		   	ins = ins_iter.next()
			
			
		bbs_dict[str(block_start)] = {'disass': disass}
		disass = []
		block = blocks.next()


	func_dict = {
	                'nodes': nodes_cfg,
	                'edges': edges_cfg,
	                'basic_blocks': bbs_dict
	            }
	             
	#filename = "C:/Users/Alessia/Desktop/Unimi/Tesi/Ghidra_outputs/cfg_" + name + ".json"
	filename = "cfg_" + name + ".json"
	pathCFG = os.path.join(path, filename)
	with open(pathCFG, "w") as outfile:
	    json.dump(func_dict, outfile)




def isFunction(fm,addr):
	bool = fm.isInFunction(addr)

	return bool

def get_jumpFrom(addr):
	refs = getReferencesFrom(addr)
	jump = refs[0]

	return jump


def buildFCG(name, bodyMethod = None):
	listing = currentProgram.getListing()
	fm = currentProgram.getFunctionManager()
	
	body = None
	funcs = fm.getFunctions(True)
	for f in funcs:
		nameSpace = str(f.getParentNamespace())
		className = parseNameSpace(nameSpace)
		functionName = str(f.getName()) 
		if name in functionName + "_" + className:
			body = f.getBody()
			break

	if body == None:
		raise Exception("Body is None")

	ins_iter = listing.getInstructions(body, True)
		
	
	while ins_iter.hasNext():
		ins = ins_iter.next()
		if "invoke" in str(ins):
			addr_toJump = get_jumpFrom(ins.getAddress()).getToAddress()
			if isFunction(fm,addr_toJump):
				methodName = str(fm.getFunctionAt(addr_toJump))
			else:
				methodName = str(get_jumpFrom(addr_toJump))[2:]
		
			
			if not("EXT" in methodName):
				methodName = parseNameSpace(methodName,True)
								
			if not(methodName in nodes_fcg):
				nodes_fcg.append(methodName)
				
			
			edges_fcg.append((name, methodName))
			
			
			detect = Utils.DetectIns(ins,methodName,edges_fcg,nodes_fcg)
			detect.detect()

			
# creo l'insieme di nodi e di archi
nodes_fcg, edges_fcg = [], []
#chiedo di inserire il nome dell'app in modo da creare la cartella con questo nome
appName = askString("App name", "Please type a name of app: ");
parent_dir = "C:/Users/Alessia/Desktop/Unimi/Tesi/Ghidra_outputs/"
dirName = appName + "/"
path = os.path.join(parent_dir, dirName)
pathFCG = os.path.join(path, "fcg.json")


if not(os.path.exists(path)):
	os.mkdir(path)


mainMethod = askString("Main method's name", "Please type a name of main method: ");
name = "onCreate" + "_" + mainMethod
buildFCG(name)
nodes_fcg.append(name)

i = 0
method_class = str(edges_fcg[0][0])
while i < len(edges_fcg):
	#espando il grafo prendendo in considerazione i metodi chiamati dal metodo in esame
	if (method_class in str(edges_fcg[i][0])) and not("EXTERNAL" in edges_fcg[i][1]):
		#node = edges_fcg[i][1].split("::")[-1]
		node = edges_fcg[i][1]
		buildFCG(node)

	if not(method_class in str(edges_fcg[i][0])):
		method_class = edges_fcg[i][0].split("::")[-1]
	else:
		i = i + 1
	
#per i metodi che non sono esterni costruisco il CFG
for node in nodes_fcg:
	if not("EXT" in node):
		name = node.split("::")[-1]
		buildCFG(name)

fcg_dict = {
                'nodes': nodes_fcg,
                'edges': edges_fcg
            }
             
with open(pathFCG, "w") as outfile:
    json.dump(fcg_dict, outfile)



