#TODO write a description for this script
#@author 
#@category _NEW_
#@keybinding 
#@menupath 
#@toolbar 

import codecs
import json


def isFunction(fm,addr):
	bool = fm.isInFunction(addr)

	return bool

def get_jumpFrom(addr):
	refs = getReferencesFrom(addr)
	jump = refs[0]

	return jump

def buildFCG(name):
	listing = currentProgram.getListing()
	fm = currentProgram.getFunctionManager()
	funcs = fm.getFunctions(True)
	for f in funcs:
		if str(f.getName()) in str(name).split("::")[-1]:
			body = f.getBody()
			name_entry = f.getName()
		

	ins_iter = listing.getInstructions(body, True)

	
	while ins_iter.hasNext():
		ins = ins_iter.next()
		if "invoke" in str(ins):
			addr_toJump = get_jumpFrom(ins.getAddress()).getToAddress()
			if isFunction(fm,addr_toJump):
				methodName = str(fm.getFunctionAt(addr_toJump))
			else:
				methodName = str(get_jumpFrom(addr_toJump))[2:]

			if not(methodName in nodes_list):
				nodes_list.append(methodName)

			if not((name, methodName) in edges_list):
				edges_list.append((name, methodName))
	
# creo l'insieme di nodi e di archi
nodes_list, edges_list = [], []
nodes_list.append("onCreate")
buildFCG("onCreate")	
name = "onCreate"
i = 0

while i < len(edges_list):
	if (name in edges_list[i][0]) and not("EXTERNAL" in edges_list[i][1]):
		#node = edges_list[i][1].split("::")[-1]
		node = edges_list[i][1]
		buildFCG(node)

	if not(name in edges_list[i][0]):
		name = edges_list[i][0].split("::")[-1]
	else:
		i = i + 1
	

fcg_dict = {
                'nodes': nodes_list,
                'edges': edges_list
            }
             
with open("//wsl.localhost/Ubuntu-20.04/root/Documents/Tesi/Ghidra/outputs/FCG/fcg_test.json", "w") as outfile:
    json.dump(fcg_dict, outfile)


